#!/usr/bin/env python3
"""Python commands to manage the Insound project

Example:
    Configuring CMake project in Debug mode:
    `python run config Debug`

    Build server CMake project in Debug mode:
    `python run build Debug`

    Build & Run the server in Release mode:
    `python run serve Release`


Pre-install requirements:
    - python3
    - cmake
    - ninja

Pip install:
    - psutil, handles killing processes cross-platform

"""
import os
import sys
import platform
import signal

try:
    import psutil
    no_kill = False
except ImportError:
    print("Warning psutil is not available, process termination feature "
          "turned off")
    no_kill = True

# Name of the server project file
PROJECT_NAME: str = "insound-server"

TEST_NAME: str = "insound-tests"

# Path to the project root (this file should be located in root)
PROJECT_PATH: str = os.path.dirname(__file__)

# Path to the build folder
BUILD_PATH: str = os.path.join(PROJECT_PATH, "build")


def config_env(path: str = os.path.join(PROJECT_PATH, ".env")):
    """
        Configure executable's environment variables
    """
    if not os.path.exists(path):
        return
    print("Environment set")
    try:
        file = open(path)
        lines: list[str] = file.readlines()
        for line in lines:
            line = line.strip()

            # skip comments and empty lines
            if line.startswith('#') or not line:
                continue

            # find assignment operator
            assign_op = line.find('=')
            if assign_op == -1:
                continue

            # get & set variable namd and value
            var_name = line[:assign_op]
            var_value = line[assign_op + 1:]
            os.environ[var_name] = var_value
            print(f"    {var_name} = {var_value}")

        print("\n")
    except Exception as e:
        print("Error occured during config_env: ", e)
        exit(1)


def config(build_type: str = "Debug", env_path: str =
           os.path.join(PROJECT_PATH, ".env"), args=""):
    """
        Configure server CMake project and submodule libs.
        Calls config_env() to load an .env in project root if it exists.

        Args:
            build_type (str): CMake build type. Defaults to `"Debug"`
            env_path (str): path to env file to open. Defaults to .env in
                project path.
    """
    print(
        "\n"
        f"----- config ----------------------------------------------------\n")
    print(
        f"System   {platform.system()} {platform.uname()[4]}")
    print(f"Build    {build_type.title()}")

    # Try configuring env file, can safely fail if it doesn't exist.
    config_env(env_path)

    print(f"Configuring CMake Project...\n")

    target_build_dir = os.path.join(BUILD_PATH, build_type.lower())
    result = os.system(
        f"cmake -E make_directory {target_build_dir} && "
        f"cmake -G Ninja -S {PROJECT_PATH} -B {target_build_dir} "
        f"-DCMAKE_BUILD_TYPE={build_type} "
        f"-DCMAKE_EXPORT_COMPILE_COMMANDS=1 "
        + args
    )

    if result != 0:
        exit(result)

    print("\nCMake config succeeded.\n")

    # move the current compile_commands.json to the build directory
    compile_commands_dest = os.path.join(BUILD_PATH, "compile_commands.json")
    compile_commands_orig = os.path.join(target_build_dir,
                                         "compile_commands.json")

    if not os.path.isfile(compile_commands_orig):
        print(
            f"Warning: compile_commands.json was not generated at expected "
            f"location -> \"{compile_commands_orig}\""
        )
    else:
        if os.path.isfile(compile_commands_dest):
            os.remove(compile_commands_dest)

        os.rename(compile_commands_orig, compile_commands_dest)

    print("Project configured.\n")


def build(build_type: str = "Debug", target: str = PROJECT_NAME, args=""):
    """
        Configure and build a Cmake project.
        Args:
            build_type (str, optional): CMake build type. Defaults to `"Debug"`
            target (str, optional): CMake target to build. Defaults to main
                server project.
    """
    config(build_type, args=args)
    print(
        "\n"
        f"----- build -----------------------------------------------------\n")
    result = os.system(
        f"cmake --build {os.path.join(BUILD_PATH, build_type.lower())} "
        f"--target {target}")
    if result != 0:
        exit(result)
    print("\nBuild succeeded.\n")


def install(build_type: str = "Debug", target: str = PROJECT_NAME,
            prefix: str = "", args: str = ""):
    """
        Configure and build a Cmake project.
        Args:
            build_type (str, optional): CMake build type. Defaults to `"Debug"`
            target (str, optional): CMake target to build. Defaults to main
                server project.
    """
    if prefix == "":
        prefix = os.path.join(BUILD_PATH, build_type.lower(), "install")
    args += " -DINSOUND_INSTALL_PREFIX=" + prefix

    build(build_type, target, args)
    print(
        "\n"
        f"----- install ---------------------------------------------------\n")
    result = os.system(
        f"cmake --install {os.path.join(BUILD_PATH, build_type.lower())} "
        f"--config {build_type.title()}")
    if result != 0:
        exit(result)
    print("\nInstall succeeded.\n")


def _get_binary_dir(build_type: str, target: str):
    """
        Get the binary directory for a project from its CMakeCache.txt
        Args:
            build_type (str): CMake build type
            target (str):     CMake target name

        Returns:
            (str): the path to the target's binary dir. If one is not found,
                it returns the build path. Make sure that the target name is
                spelled correctly.
    """
    cache_path = os.path.join(BUILD_PATH, build_type.lower(), "CMakeCache.txt")
    if not os.path.exists(cache_path):
        print("Error, could not find CMake cache at expected location: " +
              cache_path)
        exit(1)
    file = open(cache_path)

    var_name = target + "_BINARY_DIR"
    lines = file.readlines()
    for line in lines:
        if line.startswith(var_name):
            return line.rstrip().split("=")[1]

    return os.path.join(BUILD_PATH, build_type.lower())


def _kill_proc_tree(pid: int, sig: int = signal.SIGTERM, timeout: int = None,
                    on_terminate=None):
    """
        Kill a process and all of its children
        Args:
            pid (int):     the process id
            sig (int):     the signal to call on the process
            timeout (int): number of seconds to allow for process to finish

        Returns:
            (list[Process], list[Process]): A tuple with two list of processes
                that were targeted that are:
                    0: terminated
                    1: stil alive
    """
    # don't kill own process
    if pid == os.getpid():
        return (list(), list())
    parent = psutil.Process(pid)
    processes = parent.children(recursive=True)
    processes.append(parent)

    for p in processes:
        try:
            p.send_signal(sig)
        except psutil.NoSuchProcess:
            pass
    gone, alive = psutil.wait_procs(processes, timeout=timeout,
                                    callback=on_terminate)
    return (gone, alive)


def kill_process(name: str):
    """
        Kill a process by `name`.
    """
    if no_kill:
        return
    for proc in psutil.process_iter():
        if name.lower() == proc.name().lower():
            print(f"Ending pre-existing process {proc.pid}: {proc.name()}")
            gone, alive = _kill_proc_tree(proc.pid, sig=signal.SIGTERM,
                                          timeout=1)
            if len(alive) > 0:
                gone, alive = _kill_proc_tree(proc.pid, sig=signal.SIGKILL,
                                              timeout=1)
                if len(alive) > 0:
                    print(f"Failed to kill process \"{name}\"")
                else:
                    print(f"Process {proc.pid} killed.\n")
            else:
                print(f"Process {proc.pid} terminated.\n")


def kill_server():
    """
        Kill the server if it's currently running.
        Only available on macOS and Linux
    """
    kill_process(PROJECT_NAME)


def _leaks(build_type: str = "Debug", target: str = PROJECT_NAME):
    """
        On macOS, use `leaks` to detect memory leaks in the program
    """
    if platform.system() != "Darwin":
        print("Sorry, memcheck only supports macOS via leaks")
        return "unsupported"
    result = os.system("export MallocStackLogging")
    if result != 0:
        exit(result)

    print("Using macOS leaks\n")
    exec_path = os.path.join(_get_binary_dir(build_type, target), target)

    return os.system(f"leaks --list -q --atExit -- {exec_path}")


def run(build_type: str = "Debug", target: str = PROJECT_NAME, kill="True",
        check_leaks: str = "True"):
    """
        Configure, build, and run a CMake target.
        Args:
            build_type (str, optional): the CMake build type.
                Defaults to `"Debug"`

            target (str, optional): the CMake target. Defaults to main server.

            kill (bool, optional): whether to kill process of the same target
                name. Defautls to `True`.

            check_leaks (bool, optional): whether to run leak checking
                software.
    """
    build(build_type, target)

    print(
        "\n"
        f"----- run -------------------------------------------------------\n")
    if kill == "True":
        if check_leaks:
            kill_process("leaks")
        kill_process(target)

    if check_leaks == "True":
        result = _leaks(build_type, target)
        if result != "unsupported":
            exit(result)

        print("Attempting run without leak checks")

    exec_path = os.path.join(_get_binary_dir(build_type, target), target)
    result = os.system(exec_path)


def serve(build_type: str = "Debug"):
    """
        Build & run the server
    """
    run(target=PROJECT_NAME, build_type=build_type)


def test(build_type: str = "Debug"):
    """
        Build & run the tests
    """
    run(target=TEST_NAME, build_type=build_type)


def help():
    """
        Display the help menu
    """
    print(
        "\n"
        "====== Insound build helper script ===============================\n"
        "\n"
        "       Build script for project management. Please make sure that \n"
        "       Python 3, CMake and Ninja are installed on your system in \n"
        "       order to use the build system.\n"
        "\n"
        "COMMANDS\n"
        "\n"
        "  config     <build_type>\n"
        "\n"
        "      configures build scripts\n"
        "\n"
        "      available build types: \n"
        "      - Release\n"
        "      - Debug (default)\n"
        "      - RelWithDebInfo\n"
        "      - MinSizeRel\n"
        "\n"
        "\n"
        "  build      <build_type> <target_name>\n"
        "\n"
        "      builds a cmake target\n"
        "\n"
        "      available target names: \n"
        "      - insound-server (default)\n"
        "      - insound-tests\n"
        "\n"
        "  serve      <build_type>\n"
        "\n"
        "      configures, builds, and runs insound-server\n"
        "\n"
        "  test       <build_type>\n"
        "\n"
        "      configures, builds, and runs insound-tests\n"
        "\n"
    )


def main(argc: int, argv: list[str]):
    this = sys.modules[__name__]

    # There should be a command
    if argc < 2:
        help()
        exit()

    # Get the command, and run it if it is available
    try:
        command = getattr(this, argv[1])
    except AttributeError as e:
        print(f"Could not find command \"{argv[1]}\"")
        help()
        exit()

    if command is not None and callable(command):
        # Pass args if any
        if argc > 2:
            command(*argv[2:])
        else:
            command()
    else:
        help()


if __name__ == "__main__":
    main(len(sys.argv), sys.argv)
